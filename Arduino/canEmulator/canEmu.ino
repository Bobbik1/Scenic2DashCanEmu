#define SPI_CS_PIN 10
#define CAN_INT_PIN 2
#define SERIAL_SPEED 9600
//#define ENABLE_CANBUS
#define SPEEDUP 500 //the smaler, the faster (default is 1000)

#include <SPI.h>
#include <mcp_can.h> //https://github.com/coryjfowler/MCP_CAN_lib

MCP_CAN CAN(SPI_CS_PIN); //global init of can-library
unsigned long startTime;

struct msgStruct {
  byte duration; //how long to wait before next msg is send
  short id;      //the CAN-ID
  INT8U dlc;     //Number of data-bytes in this msg (currently <= 8 bytes)
  INT8U data[8]; //the data which is send to the dash
};

/**
 * the following stuct contains the messages which are send to the dash
 * feel free to add or remove messages.
 * {duration, id, dlc {byte1, byte2, ... byte_dlc}}
**/
const struct msgStruct messages[] PROGMEM = { //load into flash-memory (sram was to small)
  /*
   {3000, 0x354, 8, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00}}  //0
  ,{3000, 0x35d, 8, { 0x10, 0x03, 0x20, 0x00, 0x00, 0x00, 0x50, 0x00}}  //1 dash on
  ,{1000, 0x374, 3, { 0x28, 0x02, 0x3B}}                                //2
  ,{1000, 0x743, 8, { 0x02, 0x10, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00}}  //3
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00}}  //4 full small vfd 
  ,{1000, 0x743, 8, { 0x02, 0x10, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00}}  //5
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x04, 0x20, 0x0a, 0x00, 0x00, 0x00}}  //6
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x04, 0x20, 0x0b, 0x00, 0x00, 0x00}}  //7 speed
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x05, 0x20, 0x46, 0x00, 0x00, 0x00}}  //8
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x05, 0x20, 0x44, 0x00, 0x00, 0x00}}  //9 tacho full
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x01, 0x20, 0x09, 0x00, 0x00, 0x00}}  //10 tl
  ,{1000, 0x743, 8, { 0x04, 0x30, 0x01, 0x20, 0x0c, 0x00, 0x00, 0x00}}  //11 tr
  ,{1000, 0x60d, 8, { 0x00, 0x10, 0x00, 0x00, 0x27, 0x73, 0x21, 0x71}}  //12 buzzer
  */

  {20, 0x35D, 8, {0x90, 0x03, 0x00, 0x00, 0x00, 0x01, 0x50, 0x00}}
  ,{4, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x06, 0x20, 0xFF, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x07, 0x20, 0xFF, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x07, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x06, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x05, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x18, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x12, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x11, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x0A, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x0B, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x04, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x14, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x17, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00}}
  ,{11, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x06, 0x11, 0xFF, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x07, 0x11, 0xFF, 0x00, 0x00, 0x00}}
  ,{0, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x01, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x07, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x06, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x05, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x18, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x12, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x11, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x0A, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x0B, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x04, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x14, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x17, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x03, 0x11, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x08, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x02, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x15, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x19, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x0F, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x09, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x0C, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x0E, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x03, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x13, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x10, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x17, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x07, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x16, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x11, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x0F, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x08, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x1E, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x19, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x06, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x0E, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x09, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x1F, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x03, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x1B, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x12, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x0A, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x20, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x0B, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x13, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x1A, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x02, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x20, 0x1D, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x05, 0x20, 0x46, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x20, 0x16, 0x00, 0x00, 0x00}}
  ,{11, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x08, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x02, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x15, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x19, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x0F, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x09, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x0C, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x0E, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x03, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x13, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x10, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x17, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x07, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x16, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x11, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x0F, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x08, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x1E, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x19, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x06, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x01, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x0E, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x09, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x1F, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x03, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x1B, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x12, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x0A, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x20, 0x00, 0x00, 0x00}}
  ,{0, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x0B, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x13, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x1A, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x02, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x02, 0x11, 0x1D, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x05, 0x11, 0x46, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x01, 0x11, 0x16, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x04, 0x20, 0xBC, 0x00, 0x00, 0x00}}
  ,{7, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x04, 0x11, 0xBC, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x04, 0x20, 0xC8, 0x00, 0x00, 0x00}}
  ,{7, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x04, 0x11, 0xC8, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00}}
  ,{7, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x04, 0x30, 0x03, 0x11, 0x01, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x02, 0x10, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00}}
  ,{1, 0x743, 8, {0x02, 0x10, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00}}
};

/**
 * Convenient function which prints debug output to the serial console
 */
void printMsg(int i, msgStruct msg){
  
  unsigned long d = ((millis()-startTime)/1000);
  byte s = d % 60;
  byte m = (d/60) % 60;
  byte h = (d/3600);
  
  Serial.print(h); Serial.print(":"); Serial.print(m); Serial.print(":"); Serial.print(s);
  Serial.print("\t");
  Serial.print(i);
  Serial.print("\t");
  Serial.print("{");
  Serial.print(msg.duration);
  Serial.print(", ");
  Serial.print(msg.id, HEX);
  Serial.print(", ");
  Serial.print(msg.dlc, HEX);
  Serial.print(", {");
  for(int i=0; i<msg.dlc; i++) {
    Serial.print(msg.data[i], HEX);
    if (i<msg.dlc) Serial.print(", ");
  }
  Serial.println("}}");
}

/**
 * Setup and initialization
 */
void setup(){
  Serial.begin(SERIAL_SPEED); //speed for arduino serial monitor
  while (!Serial);
#if defined(ENABLE_CANBUS)
  Serial.println(F("CAN setup.."));
  while (CAN_OK != CAN.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ)){ //CAN-Bus setup
    delay(500);
    Serial.println(F("CAN BUS: starting error! Trying again..."));
  }
  CAN.setMode(MCP_NORMAL);
#endif  
  delay(2000); //just wait for a while...
  startTime = millis();
  Serial.println(F("setup finished."));
}

/**
 * For ever loop throu our msg and send them to the dash
 */
void loop(){
    msgStruct m;
    for(int i=0; i<(sizeof(messages)/sizeof(msgStruct)); i++){ //loop throu all messages
      memcpy_P(&m, &messages[i], sizeof(msgStruct)); //read msg from flash-memory into sram
      printMsg(i, m);

#if defined(ENABLE_CANBUS)
      if (CAN_OK != CAN.sendMsgBuf(m.id, 0, m.dlc, m.data)){ //here we send the CAN-Messages
        Serial.println(F("Error sending message..."));
      }
#endif

      delay(m.duration*SPEEDUP); //wait for <duration> secs.
    }
}
